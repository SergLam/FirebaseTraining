//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `chat_tab`.
    static let chat_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_tab")
    /// Image `contacts_tab`.
    static let contacts_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "contacts_tab")
    /// Image `map_tab`.
    static let map_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_tab")
    /// Image `profile_tab`.
    static let profile_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_tab")
    /// Image `splash_ic`.
    static let splash_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_ic")
    
    /// `UIImage(named: "chat_tab", bundle: ..., traitCollection: ...)`
    static func chat_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contacts_tab", bundle: ..., traitCollection: ...)`
    static func contacts_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contacts_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map_tab", bundle: ..., traitCollection: ...)`
    static func map_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_tab", bundle: ..., traitCollection: ...)`
    static func profile_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_ic", bundle: ..., traitCollection: ...)`
    static func splash_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_ic, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// en translation: By signing up, you agree to our  Terms & Conditions and Privacy Policy
      /// 
      /// Locales: en
      static let signUpRules = Rswift.StringResource(key: "signUp.rules", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en
      static let entranceEmail = Rswift.StringResource(key: "entrance.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en
      static let errorAlertTitle = Rswift.StringResource(key: "error.alertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: First Name
      /// 
      /// Locales: en
      static let signUpFirstName = Rswift.StringResource(key: "signUp.firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot password?
      /// 
      /// Locales: en
      static let signInForgotPassword = Rswift.StringResource(key: "signIn.forgotPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid email
      /// 
      /// Locales: en
      static let errorInvalidEmail = Rswift.StringResource(key: "error.invalid-email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid password - Should contains at least one digit, lower case letter, upper case letter and should contains at least 8 symbols
      /// 
      /// Locales: en
      static let errorInvalidPassword = Rswift.StringResource(key: "error.invalid-password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en
      static let entrancePassword = Rswift.StringResource(key: "entrance.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static let signUpPrivacy = Rswift.StringResource(key: "signUp.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Second Name
      /// 
      /// Locales: en
      static let signUpSecondName = Rswift.StringResource(key: "signUp.secondName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign In
      /// 
      /// Locales: en
      static let signInButton = Rswift.StringResource(key: "signIn.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Up
      /// 
      /// Locales: en
      static let signUpButton = Rswift.StringResource(key: "signUp.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en
      static let signUpTerms = Rswift.StringResource(key: "signUp.terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: By signing up, you agree to our  Terms & Conditions and Privacy Policy
      /// 
      /// Locales: en
      static func signUpRules(_: Void = ()) -> String {
        return NSLocalizedString("signUp.rules", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en
      static func entranceEmail(_: Void = ()) -> String {
        return NSLocalizedString("entrance.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func errorAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.alertTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: First Name
      /// 
      /// Locales: en
      static func signUpFirstName(_: Void = ()) -> String {
        return NSLocalizedString("signUp.firstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forgot password?
      /// 
      /// Locales: en
      static func signInForgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("signIn.forgotPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid email
      /// 
      /// Locales: en
      static func errorInvalidEmail(_: Void = ()) -> String {
        return NSLocalizedString("error.invalid-email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid password - Should contains at least one digit, lower case letter, upper case letter and should contains at least 8 symbols
      /// 
      /// Locales: en
      static func errorInvalidPassword(_: Void = ()) -> String {
        return NSLocalizedString("error.invalid-password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func entrancePassword(_: Void = ()) -> String {
        return NSLocalizedString("entrance.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static func signUpPrivacy(_: Void = ()) -> String {
        return NSLocalizedString("signUp.privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Second Name
      /// 
      /// Locales: en
      static func signUpSecondName(_: Void = ()) -> String {
        return NSLocalizedString("signUp.secondName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign In
      /// 
      /// Locales: en
      static func signInButton(_: Void = ()) -> String {
        return NSLocalizedString("signIn.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign Up
      /// 
      /// Locales: en
      static func signUpButton(_: Void = ()) -> String {
        return NSLocalizedString("signUp.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en
      static func signUpTerms(_: Void = ()) -> String {
        return NSLocalizedString("signUp.terms", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_ic' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
